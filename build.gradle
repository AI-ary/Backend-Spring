plugins {
	id 'java'
	id 'jacoco'
	id 'org.springframework.boot' version '2.7.14-SNAPSHOT'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id "org.asciidoctor.jvm.convert" version "3.3.2"
}

group = 'com.aiary'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '11'
}

jacoco {
	toolVersion = '0.8.5'
}

// 테스트 태스크에 Jacoco 통합
test{
	finalizedBy 'jacocoTestReport'
}

// 테스트 작업이 완료된 후 'jacocoTestReport' 작업을 실행하도록 설정
jacocoTestReport {
	reports {
		xml.required = false
		csv.required = false
		html.required = true
	}
	finalizedBy jacocoTestCoverageVerification
}

// Jacoco 코드 커버리지 검증 설정
jacocoTestCoverageVerification {
	violationRules {
		rule {
			enabled = true
			element = 'CLASS'

			limit {
				counter = 'METHOD'
				value = 'COVEREDRATIO'
				minimum = 0.00
			}

			limit {
				counter = 'INSTRUCTION' // 조건, 반복문
				value = 'COVEREDRATIO'
				minimum = 0.00
			}
			excludes = ["*.dto.*", "*.global.*", "*.AiaryApplication*", "*.config.*", "*.exceptions.*"]
		}
	}
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
	maven { url 'https://repo.spring.io/snapshot' }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springdoc:springdoc-openapi-ui:1.7.0'
	implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'

	// jwt
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'

	// test
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.mockito:mockito-core:4.8.0'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testImplementation 'org.springframework.restdocs:spring-restdocs-asciidoctor'
}

tasks.named('test') {
	useJUnitPlatform()
}

// 변수 선언
//  snippetsDir 변수는 생성된 스니펫 파일을 저장할 디렉토리를 지정합니다. 스니펫 파일은 API 엔드포인트에서 생성된 예제 요청 및 응답 정보를 포함합니다.
ext {
	snippetsDir = file('build/generated-snippets')
}

// bootjar과 관련된 설정이며, 스니펫을 이용해 문서 작성 후,
// build - docs - asciidoc 하위에 생기는 html 파일을 static/docs로 복사해줍니다.
bootJar {
	dependsOn asciidoctor
	from("${asciidoctor.outputDir}/html5")
	into 'static/docs'
}

asciidoctor {
	inputs.dir snippetsDir
	dependsOn test
}

configurations {
	asciidoctorExtensions
	compileOnly {
		extendsFrom annotationProcessor
	}
}

